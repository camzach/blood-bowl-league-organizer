type Inducements {
  basic: [BasicInducement!]! @link
  starPlayers: [StarPlayer!]! @link
  wizards: [Wizard!]! @link
  infamousCoachingStaff: [InfamousCoachingStaff!]! @link
  biasedRefs: [BiasedRef!]! @link
}

type BasicInducement @entity {
  name: String! @column
  max: Int! @column
  price: Int @column
  specialPrices: [SpecialPrice!] @column
}

type StarPlayer @entity {
  name: String! @column
  MA: Int! @column
  ST: Int! @column
  PA: Int @column
  AG: Int! @column
  AV: Int! @column
  skills: [String!]! @column
  specialRules: String! @column
  price: Int! @column
  playsFor: [String!] @column
  doesntPlayFor: [String!] @column
}

type Wizard @entity {
  name: String! @column
  price: Int! @column
  specialPrices: [SpecialPrice!] @column
}

type InfamousCoachingStaff @entity {
  name: String! @column
  price: Int! @column
  specialPrices: [SpecialPrice!] @column
}

type BiasedRef @entity {
  name: String! @column
  price: Int! @column
  specialPrices: [SpecialPrice!] @column
}

type SpecialPrice {
  rule: String!
  price: Int!
}

extend type Query {
  inducements(specialRules: [String!]): Inducements!
}
