type Player @entity(
  additionalFields: [
    { path: "injuries", type: {
      missNextGame: "boolean",
      niggles: "number",
      MA: "number",
      AG: "number",
      PA: "number",
      ST: "number",
      AV: "number",
    } }
    { path: "improvements", type: {
      MA: "number",
      AG: "number",
      PA: "number",
      ST: "number",
      AV: "number",
    } }
    { path: "MA", type: "number" }
    { path: "ST", type: "number" }
    { path: "PA", type: "number | null" }
    { path: "AG", type: "number" }
    { path: "AV", type: "number" }
    { path: "_id", type: "ObjectId" }
  ]
) {
  name: String @column
  number: Int! @column
  team: Team! @link
  position: String! @column
  stats: PlayerStats!
  skills: [Skill!]! @column(overrideType: "Array<{ id: ObjectId; modifier?: string }>")
  progression: [String!]! @column
  starPlayerPoints: StarPlayerPoints! @column
  teamValue: TeamValue! @column
  casualties: Casualties!
}

type PlayerStats {
  MA: Int!
  ST: Int!
  PA: Int
  AG: Int!
  AV: Int!
}

type StarPlayerPoints {
  MVPs: Int!
  casualties: Int!
  completions: Int!
  deflections: Int!
  interceptions: Int!
  prayersToNuffle: Int!
  touchdowns: Int!
}

type TeamValue {
  base: Int!
  current: Int!
}

type Casualties {
  missNextGame: Boolean!
  niggles: Int!
}

extend type Query {
  player(name: String!): Player
  # players(query: PlayerQueryInput, limit: Int = 100, sortBy: PlayerSortByInput): [Player]!
}
