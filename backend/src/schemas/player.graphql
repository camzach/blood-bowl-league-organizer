type Player @entity(
  additionalFields: [
    { path: "injuries", type: {
      missNextGame: "boolean",
      niggles: "number",
      MA: "number",
      AG: "number",
      PA: "number",
      ST: "number",
      AV: "number",
    } }
    { path: "improvements", type: {
      MA: "number",
      AG: "number",
      PA: "number",
      ST: "number",
      AV: "number",
    } }
    { path: "MA", type: "number" }
    { path: "ST", type: "number" }
    { path: "PA", type: "number | null" }
    { path: "AG", type: "number" }
    { path: "AV", type: "number" }
  ]
) {
  id: String! @id
  name: String @column
  number: Int! @column
  team: Team! @link
  position: String! @column
  stats: PlayerStats!
  skills: [Skill!]! @link
  progression: [ProgressionOption!]! @column
  starPlayerPoints: StarPlayerPoints! @embedded
  teamValue: TeamValue! @column
  casualties: Casualties!
}

enum ProgressionOption {
  RandomPrimary
  ChosenPrimary
  RandomSecondary
  ChosenSecondary
  CharacteristicSecondary
  MA
  ST
  PA
  AG
  AV
}

type PlayerStats {
  MA: Int!
  ST: Int!
  PA: Int
  AG: Int!
  AV: Int!
}

type StarPlayerPoints @entity(embedded: true) {
  MVPs: Int! @column
  casualties: Int! @column
  completions: Int! @column
  deflections: Int! @column
  interceptions: Int! @column
  prayersToNuffle: Int! @column
  touchdowns: Int! @column
  total: Int!
  current: Int!
}

type TeamValue {
  base: Int!
  current: Int!
}

type Casualties {
  missNextGame: Boolean!
  niggles: Int!
}

extend type Query {
  player(name: String!): Player
  # players(query: PlayerQueryInput, limit: Int = 100, sortBy: PlayerSortByInput): [Player]!
}

type SkillPurchaseResult {
  success: Boolean!
  skill: Skill!
  player: Player!
}

enum CharacteristicImprovementPreference {
  ST
  MA
  AG
  PA
  AV
  Secondary
}
type CharacteristicImprovementResult {
  success: Boolean!
  player: Player!
  characteristic: CharacteristicImprovementPreference!
}

extend type Mutation {
  purchaseRandomSkill(playerId: String!, category: SkillCategory!): SkillPurchaseResult!
  purchaseChosenSkill(playerId: String!, skillId: String!): SkillPurchaseResult!
  purchaseCharacteristicImprovement(
    playerId: String!
    preferences: [CharacteristicImprovementPreference!]!
    secondarySkillChoice: String!
  ): CharacteristicImprovementResult!
}
