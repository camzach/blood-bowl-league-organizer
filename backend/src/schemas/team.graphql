type Team @entity {
  id: String! @id
  race: Roster! @link
  coach: String! @column
  name: String! @column
  apothecary: Boolean! @column
  coaches: Int! @column
  cheerleaders: Int! @column
  fans: Int! @column
  treasury: Int! @column
  rerolls: Int! @column
  players(missNextGame: Boolean): [Player!]! @link
  teamValue: TeamValue! @column
  hireableJourneymen: [Player!]! @link
}

type TeamValue {
  base: Int! @column
  current: Int! @column
}

extend type Query {
  team(id: String!): Team
  teams: [Team!]!
}

type HirePlayerResult {
  success: Boolean
}

type HireJourneymanResult {
  success: Boolean
}

extend type Mutation {
  hirePlayer(
    teamId: String!
    position: String!
    number: Int!
  ): HirePlayerResult!
  hireJourneyman(
    teamId: String!
    playerId: String!
    number: Int!
  ): HireJourneymanResult!
}
