type RosterPlayer @entity(embedded: true) {
  position: String! @column
  max: Int! @column
  cost: Int! @column
  MA: Int! @column
  ST: Int! @column
  AG: Int! @column
  PA: Int @column
  AV: Int! @column
  secondary: [String!]! @column
  primary: [String!]! @column
  skills: [Skill!]! @column(overrideType: "Array<{ id: ObjectId; modifier?: string }>")
}

type Skill @entity(additionalFields: [
  { path: "_id", type: "ObjectId" }
]) {
  name: String! @column
  rules: String! @column
}

type Roster @entity(
  additionalFields: [
    { path: "_id", type: "ObjectId" }
  ]
) {
  name: String! @column
  rerollCost: Int! @column
  tier: Int! @column
  players: [RosterPlayer!]! @embedded
  specialRules: [String!]! @column
}

extend type Query {
  rosters: [Roster!]!
  roster(name: String!): Roster
}