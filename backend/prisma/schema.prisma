// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                 String          @id @unique @default(uuid()) @db.Uuid
  name               String?
  playerTeam         Team?           @relation("players", map: "Player_team__fkey", fields: [playerTeamName], references: [name])
  journeymanTeam     Team?           @relation("journeymen", map: "Player_journeyman__fkey", fields: [journeymanTeamName], references: [name])
  playerTeamName     String?
  journeymanTeamName String?
  nigglingInjuries   Int             @default(0)
  missNextGame       Boolean         @default(false)
  AG                 Int
  AGImprovements     Int             @default(0)
  MA                 Int
  MAImprovements     Int             @default(0)
  PA                 Int?
  PAImprovements     Int             @default(0)
  ST                 Int
  STImprovements     Int             @default(0)
  AV                 Int
  AVImprovements     Int             @default(0)
  starPlayerPoints   Int             @default(0)
  touchdowns         Int             @default(0)
  completions        Int             @default(0)
  deflections        Int             @default(0)
  interceptions      Int             @default(0)
  casualties         Int             @default(0)
  teamValue          Int
  learnedSkills      Int             @default(0)
  primary            SkillCategory[]
  secondary          SkillCategory[]
  skills             Skill[]
  position           Position        @relation(fields: [positionId], references: [id])
  positionId         String          @db.Uuid
}

enum TeamState {
  Draft
  Ready
  Playing
  PostGame
}

model Team {
  name             String    @id @unique
  players          Player[]  @relation("players")
  journeymen       Player[]  @relation("journeymen")
  treasury         Int       @default(1000000)
  state            TeamState @default(Draft)
  roster           Roster    @relation(fields: [rosterName], references: [name])
  rosterName       String
  rerolls          Int       @default(0)
  cheerleaders     Int       @default(0)
  assistantCoaches Int       @default(0)
  apothecary       Boolean   @default(false)
  dedicatedFans    Int       @default(0)
  homeGames        Game[]    @relation("homeTeam")
  awayGames        Game[]    @relation("awayTeam")
}

model Roster {
  name         String     @id @unique
  rerollCost   Int
  tier         Int
  positions    Position[]
  specialRules String[]
  Team         Team[]
}

enum SkillCategory {
  G
  M
  P
  S
  A
  T
}

model Position {
  id         String          @id @unique @default(uuid()) @db.Uuid
  name       String
  max        Int
  cost       Int
  MA         Int
  ST         Int
  AG         Int
  PA         Int?
  AV         Int
  primary    SkillCategory[]
  secondary  SkillCategory[]
  skills     Skill[]
  Roster     Roster          @relation(fields: [rosterName], references: [name])
  rosterName String
  Player     Player[]
}

model Skill {
  name        String        @id @unique
  rules       String
  category    SkillCategory
  players     Player[]
  positions   Position[]
  starPlayers StarPlayer[]
}

model Inducement {
  name             String             @id @unique
  max              Int
  price            Int?
  specialPriceRule String?
  specialPrice     Int?
  rules            String
  options          InducementOption[]
}

model StarPlayer {
  name          String   @id @unique
  MA            Int
  ST            Int
  PA            Int?
  AG            Int
  AV            Int
  skills        Skill[]
  specialRule   String
  hiringFee     Int
  playsFor      String[]
  doesntPlayFor String[]
}

model InducementOption {
  name             String      @id @unique
  price            Int
  specialPriceRule String?
  specialPrice     Int?
  rules            String
  Inducement       Inducement? @relation(fields: [inducementName], references: [name])
  inducementName   String?
}

enum GameState {
  Scheduled
  Journeymen
  Inducements
  InProgress
  Complete
}

model Game {
  id            String    @id @unique @default(uuid()) @db.Uuid
  round         Int
  home          Team      @relation("homeTeam", fields: [homeTeamName], references: [name], map: "ScheduledGame_home__fkey")
  away          Team      @relation("awayTeam", fields: [awayTeamName], references: [name], map: "ScheduledGame_away__fkey")
  homeTeamName  String
  awayTeamName  String
  state         GameState @default(Scheduled)
  pettyCashHome Int       @default(0)
  pettyCashAway Int       @default(0)
  tdHome        Int       @default(0)
  tdAway        Int       @default(0)
  casHome       Int       @default(0)
  casAway       Int       @default(0)
}
