// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Coach {
  name             String  @id @unique
  teams            Team[]
  passwordHash     String
  needsNewPassword Boolean @default(true)
}

model Player {
  id                 String          @id @unique @default(uuid()) @db.Uuid
  name               String?
  number             Int
  playerTeam         Team?           @relation("players", map: "Player_team__fkey", fields: [playerTeamName], references: [name])
  journeymanTeam     Team?           @relation("journeymen", map: "Player_journeyman__fkey", fields: [journeymanTeamName], references: [name])
  redraftTeam        Team?           @relation("redrafts", map: "Player_redrafts__fkey", fields: [redraftTeamName], references: [name])
  playerTeamName     String?
  journeymanTeamName String?
  redraftTeamName    String?
  nigglingInjuries   Int             @default(0)
  missNextGame       Boolean         @default(false)
  dead               Boolean         @default(false)
  AG                 Int
  MA                 Int
  PA                 Int?
  ST                 Int
  AV                 Int
  AGImprovements     Int             @default(0)
  MAImprovements     Int             @default(0)
  PAImprovements     Int             @default(0)
  STImprovements     Int             @default(0)
  AVImprovements     Int             @default(0)
  totalImprovements  Int             @default(0)
  starPlayerPoints   Int             @default(0)
  touchdowns         Int             @default(0)
  completions        Int             @default(0)
  deflections        Int             @default(0)
  interceptions      Int             @default(0)
  casualties         Int             @default(0)
  MVPs               Int             @default(0)
  teamValue          Int
  primary            SkillCategory[]
  secondary          SkillCategory[]
  skills             Skill[]
  position           Position        @relation(fields: [positionId], references: [id])
  positionId         String          @db.Uuid
  seasonsPlayed      Int             @default(0)
  MVPGames           Game[]
}

enum TeamState {
  Draft
  Ready
  Playing
  PostGame
}

model Team {
  name             String    @id @unique
  players          Player[]  @relation("players")
  journeymen       Player[]  @relation("journeymen")
  redrafts         Player[]  @relation("redrafts")
  treasury         Int       @default(1000000)
  state            TeamState @default(Draft)
  roster           Roster    @relation(fields: [rosterName], references: [name])
  rosterName       String
  rerolls          Int       @default(0)
  cheerleaders     Int       @default(0)
  assistantCoaches Int       @default(0)
  apothecary       Boolean   @default(false)
  dedicatedFans    Int       @default(1)
  homeGames        Game[]    @relation("homeTeam")
  awayGames        Game[]    @relation("awayTeam")
  Coaches          Coach[]
  touchdownSong    Song?     @relation(fields: [songName], references: [name])
  songName         String?
}

model Roster {
  name         String        @id @unique
  rerollCost   Int
  tier         Int
  positions    Position[]
  specialRules SpecialRule[]
  Team         Team[]
}

model SpecialRule {
  name             String             @id @unique
  rosters          Roster[]
  Inducement       Inducement[]
  InducementOption InducementOption[]
  StarPlayers      StarPlayer[]
}

enum SkillCategory {
  G
  M
  P
  S
  A
  T
}

model Position {
  id         String          @id @unique @default(uuid()) @db.Uuid
  name       String
  max        Int
  cost       Int
  MA         Int
  ST         Int
  AG         Int
  PA         Int?
  AV         Int
  primary    SkillCategory[]
  secondary  SkillCategory[]
  skills     Skill[]
  Roster     Roster          @relation(fields: [rosterName], references: [name])
  rosterName String
  Player     Player[]
}

model Skill {
  name        String        @id @unique
  rules       String
  category    SkillCategory
  players     Player[]
  positions   Position[]
  starPlayers StarPlayer[]
}

model Inducement {
  name                 String             @id @unique
  max                  Int
  price                Int?
  specialPriceRule     SpecialRule?       @relation(fields: [specialPriceRuleName], references: [name])
  specialPriceRuleName String?
  specialPrice         Int?
  rules                String
  options              InducementOption[]
}

model StarPlayer {
  name        String        @id @unique
  MA          Int
  ST          Int
  PA          Int?
  AG          Int
  AV          Int
  skills      Skill[]
  specialRule String
  hiringFee   Int
  playsFor    SpecialRule[]
  HomeGames   Game[]        @relation("starPlayerHomeGames")
  AwayGames   Game[]        @relation("starPlayerAwayGames")
}

model InducementOption {
  name                 String       @id @unique
  price                Int?
  specialPriceRule     SpecialRule? @relation(fields: [specialPriceRuleName], references: [name])
  specialPriceRuleName String?
  specialPrice         Int?
  rules                String
  Inducement           Inducement?  @relation(fields: [inducementName], references: [name])
  inducementName       String?
  HomeGames            Game[]       @relation("inducementOptionsHome")
  AwayGames            Game[]       @relation("inducementOptionsAway")
}

enum GameState {
  Scheduled
  Journeymen
  Inducements
  InProgress
  Complete
}

enum Weather {
  Blizzard
  PouringRain
  Perfect
  VerySunny
  SwelteringHeat
}

model Game {
  id                    String             @id @unique @default(uuid()) @db.Uuid
  round                 Int
  home                  Team               @relation("homeTeam", fields: [homeTeamName], references: [name], map: "ScheduledGame_home__fkey")
  away                  Team               @relation("awayTeam", fields: [awayTeamName], references: [name], map: "ScheduledGame_away__fkey")
  homeTeamName          String
  awayTeamName          String
  state                 GameState          @default(Scheduled)
  journeymenHome        Int                @default(0)
  journeymenAway        Int                @default(0)
  inducementsHome       Json               @default("{}")
  inducementsAway       Json               @default("{}")
  inducementOptionsHome InducementOption[] @relation("inducementOptionsHome")
  inducementOptionsAway InducementOption[] @relation("inducementOptionsAway")
  starPlayersHome       StarPlayer[]       @relation("starPlayerHomeGames")
  starPlayersAway       StarPlayer[]       @relation("starPlayerAwayGames")
  pettyCashHome         Int                @default(0)
  pettyCashAway         Int                @default(0)
  touchdownsHome        Int                @default(0)
  touchdownsAway        Int                @default(0)
  casualtiesHome        Int                @default(0)
  casualtiesAway        Int                @default(0)
  fanFactorHome         Int                @default(0)
  fanFactorAway         Int                @default(0)
  MVPs                  Player[]
  weather               Weather?
}

model Song {
  name String @id
  data String
  Team Team[]
}
